#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))
require 'csv'
require 'yaml'
#require 'pp'

require 'ubiquity/mediasilo/api/utilities/cli'
require 'ubiquity/mediasilo/reporter'

LOGGING_LEVELS = {
  :debug => Logger::DEBUG,
  :info => Logger::INFO,
  :warn => Logger::WARN,
  :error => Logger::ERROR,
  :fatal => Logger::FATAL
}

options = {
  :log_to => STDOUT,
  :log_level => Logger::DEBUG,
  :options_file_path => "~/.options/#{File.basename($0, '.*')}",
  :cache_file_path => '/tmp/mediasilo_account_assets.yaml',
}
arguments = ARGV
op = OptionParser.new
op.on('--mediasilo-hostname HOSTNAME', 'The hostname to use when authenticating with the MediaSilo API.') { |v| options[:hostname] = v }
op.on('--mediasilo-username USERNAME', 'The username to use when authenticating with the MediaSilo API.') { |v| options[:username] = v }
op.on('--mediasilo-password PASSWORD', 'The password to use when authenticating with the MediaSilo API.') { |v| options[:password] = v }
op.on('--[no-]cache-file-path PATH', 'The name of the method to invoke.') { |v| options[:cache_file_path] = v }
op.on('--csv-file-path PATH', 'The path and filename of the CSV file to create.') { |v| options[:destination_file_path] = v }
op.on('--search-string STRING', 'Optionally you can provide a search string and only ')
op.on('--log-to FILENAME', 'Log file location.', "\tdefault: STDERR") { |v| options[:log_to] = v }
op.on('--log-level LEVEL', LOGGING_LEVELS.keys, "Logging level. Available Options: #{LOGGING_LEVELS.keys.join(', ')}",
      "\tdefault: #{LOGGING_LEVELS.invert[options[:log_level]]}") { |v| options[:log_level] = LOGGING_LEVELS[v] }
op.on('--[no-]options-file [FILENAME]', 'Path to a file which contains default command line arguments.', "\tdefault: #{options[:options_file_path]}" ) { |v| options[:options_file_path] = v}
op.on('--[no-]pretty-print', 'Determines if the output will be formatted for easier human readability.') { |v| options[:pretty_print] = v }
op.on_tail('-h', '--help', 'Show this message.') { puts op; exit }
op.parse!(arguments.dup)

options_file_path = options[:options_file_path]
options_file_path = File.expand_path(options_file_path) if options_file_path rescue nil
# Make sure that options from the command line override those from the options file
op.parse!(arguments.dup) if op.load(options_file_path)

# reporter = Ubiquity::MediaSilo::Reporter.new(options)
cli = Ubiquity::MediaSilo::API::Utilities::CLI.new(options)
@logger = options[:logger] = cli.initialize_logger(options)
def logger; @logger end

@ms = cli.initialize_api(cli.initial_args)
def ms; @ms end

@reporter = Ubiquity::MediaSilo::Reporter
def reporter; @reporter end
reporter.logger = logger
reporter.ms = ms

cache_file_path = options[:cache_file_path]
assets = if (cache_file_path and File.exists?(cache_file_path)) then
           YAML.load(File.read(cache_file_path))
         else
           search_string = options[:search_string]
           _assets       = search_string ? reporter.get_assets_using_search_string(search_string, :include_metadata => true) : reporter.get_assets_by_project
           File.open(cache_file_path, 'w') { |f| f.write(YAML.dump(_assets)) } if cache_file_path
           _assets
         end

csv_destination_file_path = options[:destination_file_path] || '/tmp/mediasilo_assets.csv'
reporter.output_to_csv(reporter.assets_to_table(assets.dup), csv_destination_file_path)




